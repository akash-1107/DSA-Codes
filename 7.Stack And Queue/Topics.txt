1.Implement Stack/Queue - 
    1.Stack Using Queue
    2.Queue Using Stack
    3.Stack Using Linked List
    4.Queue Using Linked List
    5.Min Stack ✅ TC = O(1)  , SC = O(N)

2.Balanced Parenthesis ✅ TC = O(N)  , SC = O(N)

3.Conversion - 
   1.Infix to PostFix
   2.Evaluation of PostFix

In short, a monotonic stack is a data structure that maintains elements in either non-increasing or non-decreasing order. It's commonly used to efficiently find the next greater or next smaller element for each element in an array. This is done by iterating through the array and using the stack to keep track of elements while maintaining the desired order, allowing for efficient solutions to various problems with a time complexity of O(n), where n is the number of elements in the input array.

4.Monotonic Stack(NGE) - 
   1.NGE - I ✅ TC = O(N)  , SC = O(N)
   2.NGE - II ✅ TC = O(N)  , SC = O(N)
   3.Next Smaller Element

5.Monotonic Stack(NGE Logic Application) - 
   1.Sum of Subarrays Minimum
   2.Sum of Subarray Ranges
   3.Stock Span Problem ✅ TC = O(N)  , SC = O(N)

6.Deque - 
   1.Sliding Window Maximum ✅ TC = O(N)  , SC = O(N)

7.Histograms -
   1.Trapping Rainwater 
   2.Largest Rectangle in a Histogram
   3.Maximal Rectangles

8.Celebrity Problem

9.Asteroid Collision

10.Remove K Digits



